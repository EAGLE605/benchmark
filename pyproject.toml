[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "benchmark"
version = "0.1.0"
description = "A benchmarking tool for performance testing"
authors = [{name = "EAGLE605", email = "eagle605@example.com"}]
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "tabulate>=0.9.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "isort>=5.10.0",
]

[project.scripts]
benchmark = "benchmark.cli:main"

[tool.black]
line-length = 88
version = "1.0.0"
description = "Product benchmarking tool with modern Python practices"
authors = [
    {name = "EAGLE605", email = "contact@eagle605.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Benchmark",
]
keywords = ["benchmark", "performance", "testing", "measurement"]

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
]

[project.scripts]
benchmark-cli = "benchmark.cli:main"
benchmark-audit = "scripts.audit:main"

[project.urls]
Homepage = "https://github.com/EAGLE605/benchmark"
Repository = "https://github.com/EAGLE605/benchmark.git"
Issues = "https://github.com/EAGLE605/benchmark/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["benchmark*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=benchmark",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]

[tool.coverage.run]
source = ["benchmark"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
line-length = 79
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["benchmark"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=benchmark --cov-report=term-missing"

[tool.coverage.run]
source = ["benchmark"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
